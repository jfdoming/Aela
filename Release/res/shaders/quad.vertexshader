#version 330 core

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_modelspace;

// Output data ; will be interpolated for each fragment.
out vec2 UV;
uniform vec2 positionOfTextureOnScreen;
uniform vec2 boundingBoxDimensions;
uniform vec2 textureDimensions;
uniform vec2 windowDimensions;
vec2 UVScaling;

void main(){
	gl_Position = vec4(vertexPosition_modelspace.x + positionOfTextureOnScreen.x, 0 - vertexPosition_modelspace.y - positionOfTextureOnScreen.y, vertexPosition_modelspace.z, 1);
	UVScaling = (textureDimensions * 2 / windowDimensions) * (boundingBoxDimensions / textureDimensions);
	UV = vec2(vertexPosition_modelspace.x - positionOfTextureOnScreen.x, vertexPosition_modelspace.y - positionOfTextureOnScreen.y) / UVScaling + (windowDimensions / 2 / boundingBoxDimensions);
}

