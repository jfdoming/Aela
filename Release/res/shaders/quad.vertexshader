#version 330 core

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_modelspace;

// Output data ; will be interpolated for each fragment.
out vec2 UV;
uniform vec2 positionOfTextureOnScreen;

void main(){
	gl_Position = vec4(vertexPosition_modelspace.x, 0 - vertexPosition_modelspace.y, vertexPosition_modelspace.z, 1);
	// UV = (vec2(vertexPosition_modelspace.x, 0 - vertexPosition_modelspace.y) + vec2(1, 1)) / 2.0;
	// UV = (vertexPosition_modelspace.xy + vec2(1, 1)) / 2.0 * vec2(2, 1);
	// UV = (vertexPosition_modelspace.xy - vec2(positionOfTextureOnScreen.x, positionOfTextureOnScreen.y) + vec2(1, 1)) / 2.0 * vec2(1, 1);
	UV = (vertexPosition_modelspace.xy - vec2(positionOfTextureOnScreen.x, positionOfTextureOnScreen.y)) / vec2(1, 2) - vec2(0, 0.5);
}

