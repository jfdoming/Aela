#version 330 core

// This is the input data.
layout(location = 0) in vec3 position;
layout(location = 1) in vec2 vertexUV;
layout(location = 2) in vec3 vertexNormal_modelspace;

// This is the output data.
out vec2 UV;
out vec3 Position_worldspace;
out vec3 Position_worldspace2;
out vec3 Normal_cameraspace;
out vec3 EyeDirection_cameraspace;
// out vec4 ShadowCoord;
out vec3 normal;

// Values that stay constant for the whole mesh.
uniform mat4 MVP;
uniform mat4 V;
uniform mat4 M;

void main(){

	// Output position of the vertex, in clip space : MVP * position
	gl_Position =  MVP * vec4(position, 1);
	Position_worldspace2 = position;
	
	normal = vertexNormal_modelspace;
	
	// Position of the vertex, in worldspace : M * position
	Position_worldspace = vec3(M * vec4(position, 1.0));
	
	// Vector that goes from the vertex to the camera, in camera space.
	// In camera space, the camera is at the origin (0,0,0).
	EyeDirection_cameraspace = vec3(0,0,0) - (V * M * vec4(position,1)).xyz;
	
	// Normal of the the vertex, in camera space
	Normal_cameraspace = (V * M * vec4(vertexNormal_modelspace,0)).xyz; // Only correct if ModelMatrix does not scale the model ! Use its inverse transpose if not.
	
	// UV of the vertex. No special space for this one.
	UV = vertexUV;
}

